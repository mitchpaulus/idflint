//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Idf.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class IdfLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, FIELD_SEPARATOR=2, OBJECT_TERMINATOR=3, NUMERIC=4, ALPHA=5, 
		WS=6;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "FIELD_SEPARATOR", "OBJECT_TERMINATOR", "NUMERIC", "ALPHA", 
		"WS"
	};


	public IdfLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public IdfLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "FIELD_SEPARATOR", "OBJECT_TERMINATOR", "NUMERIC", "ALPHA", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static IdfLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\b', 'Q', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x12', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x15', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x5', '\x5', '\x1E', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\"', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', '%', '\v', '\x5', '\x3', '\x5', '\x5', '\x5', '(', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', ',', '\n', '\x5', '\r', 
		'\x5', '\xE', '\x5', '-', '\x5', '\x5', '\x30', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x6', '\x5', '\x34', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 
		'\x35', '\x5', '\x5', '\x38', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '<', '\n', '\x5', '\x3', '\x5', '\x6', '\x5', '?', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', '@', '\x5', '\x5', '\x43', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'G', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'J', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\x13', '\x2', '\b', '\x3', 
		'\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', 
		'\x3', '\x2', '\b', '\x3', '\x2', '\x33', ';', '\x3', '\x2', '\x32', ';', 
		'\x4', '\x2', 'G', 'G', 'g', 'g', '\x5', '\x2', '\x32', ';', '\x43', '\\', 
		'\x63', '|', '\x5', '\x2', '#', '#', '.', '.', '=', '=', '\x4', '\x2', 
		'\v', '\f', '\"', '\"', '\x2', '\\', '\x2', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x3', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\x1A', '\x3', '\x2', '\x2', '\x2', '\t', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\x44', '\x3', '\x2', '\x2', '\x2', '\r', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x13', '\a', '#', '\x2', '\x2', '\x10', '\x12', 
		'\v', '\x2', '\x2', '\x2', '\x11', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x15', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', '\x2', '\x14', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\a', '\f', '\x2', '\x2', '\x17', '\x4', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\a', '.', '\x2', '\x2', '\x19', '\x6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '=', '\x2', '\x2', '\x1B', 
		'\b', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\a', '/', '\x2', '\x2', 
		'\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1F', '#', 
		'\t', '\x2', '\x2', '\x2', ' ', '\"', '\t', '\x3', '\x2', '\x2', '!', 
		' ', '\x3', '\x2', '\x2', '\x2', '\"', '%', '\x3', '\x2', '\x2', '\x2', 
		'#', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', 
		'$', '(', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'&', '(', '\a', '\x32', '\x2', '\x2', '\'', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '/', '\x3', '\x2', 
		'\x2', '\x2', ')', '+', '\a', '\x30', '\x2', '\x2', '*', ',', '\t', '\x3', 
		'\x2', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', 
		'\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x30', '\x3', '\x2', '\x2', '\x2', '/', ')', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', '\a', '\x30', '\x2', 
		'\x2', '\x32', '\x34', '\t', '\x3', '\x2', '\x2', '\x33', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x38', '\x3', '\x2', '\x2', '\x2', '\x37', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x31', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\t', '\x4', '\x2', '\x2', 
		':', '<', '\a', '/', '\x2', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', 
		'=', '?', '\t', '\x3', '\x2', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x39', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\n', '\x3', '\x2', '\x2', '\x2', 
		'\x44', 'H', '\t', '\x5', '\x2', '\x2', '\x45', 'G', '\n', '\x6', '\x2', 
		'\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'L', '\t', '\x5', '\x2', '\x2', 'L', '\f', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\t', '\a', '\x2', '\x2', 'N', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'P', '\b', '\a', '\x2', '\x2', 'P', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x2', '\x13', '\x1D', '#', '\'', '-', '/', 
		'\x35', '\x37', ';', '@', '\x42', 'H', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
