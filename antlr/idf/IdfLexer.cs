//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Idf.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class IdfLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, COMMENT=3, FIELD_SEPARATOR=4, OBJECT_TERMINATOR=5, NUMERIC=6, 
		ALPHA=7, WS=8;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "COMMENT", "FIELD_SEPARATOR", "OBJECT_TERMINATOR", "NUMERIC", 
		"ALPHA", "WS"
	};


	public IdfLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public IdfLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'SimulationControl'", "'Building'", null, "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "COMMENT", "FIELD_SEPARATOR", "OBJECT_TERMINATOR", "NUMERIC", 
		"ALPHA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static IdfLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\n', 'h', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '\x31', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'\x34', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x5', '\a', '=', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x41', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x44', '\v', '\a', '\x3', '\a', '\x5', '\a', 'G', 
		'\n', '\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', 'K', '\n', '\a', '\r', 
		'\a', '\xE', '\a', 'L', '\x5', '\a', 'O', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', 'S', '\n', '\a', '\x3', '\a', '\x6', '\a', 'V', '\n', 
		'\a', '\r', '\a', '\xE', '\a', 'W', '\x5', '\a', 'Z', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '^', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\x61', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\x32', '\x2', '\n', '\x3', '\x3', '\x5', 
		'\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', 
		'\x11', '\n', '\x3', '\x2', '\b', '\x3', '\x2', '\x33', ';', '\x3', '\x2', 
		'\x32', ';', '\x4', '\x2', 'G', 'G', 'g', 'g', '\x5', '\x2', '\x32', ';', 
		'\x43', '\\', '\x63', '|', '\x4', '\x2', '#', '#', '.', '.', '\x4', '\x2', 
		'\v', '\f', '\"', '\"', '\x2', 'q', '\x2', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x13', '\x3', '\x2', '\x2', '\x2', '\x5', '%', '\x3', '\x2', '\x2', 
		'\x2', '\a', '.', '\x3', '\x2', '\x2', '\x2', '\t', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\x39', '\x3', '\x2', '\x2', '\x2', '\r', '<', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '[', '\x3', '\x2', '\x2', '\x2', '\x11', '\x64', 
		'\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\a', 'U', '\x2', '\x2', '\x14', 
		'\x15', '\a', 'k', '\x2', '\x2', '\x15', '\x16', '\a', 'o', '\x2', '\x2', 
		'\x16', '\x17', '\a', 'w', '\x2', '\x2', '\x17', '\x18', '\a', 'n', '\x2', 
		'\x2', '\x18', '\x19', '\a', '\x63', '\x2', '\x2', '\x19', '\x1A', '\a', 
		'v', '\x2', '\x2', '\x1A', '\x1B', '\a', 'k', '\x2', '\x2', '\x1B', '\x1C', 
		'\a', 'q', '\x2', '\x2', '\x1C', '\x1D', '\a', 'p', '\x2', '\x2', '\x1D', 
		'\x1E', '\a', '\x45', '\x2', '\x2', '\x1E', '\x1F', '\a', 'q', '\x2', 
		'\x2', '\x1F', ' ', '\a', 'p', '\x2', '\x2', ' ', '!', '\a', 'v', '\x2', 
		'\x2', '!', '\"', '\a', 't', '\x2', '\x2', '\"', '#', '\a', 'q', '\x2', 
		'\x2', '#', '$', '\a', 'n', '\x2', '\x2', '$', '\x4', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\a', '\x44', '\x2', '\x2', '&', '\'', '\a', 'w', '\x2', 
		'\x2', '\'', '(', '\a', 'k', '\x2', '\x2', '(', ')', '\a', 'n', '\x2', 
		'\x2', ')', '*', '\a', '\x66', '\x2', '\x2', '*', '+', '\a', 'k', '\x2', 
		'\x2', '+', ',', '\a', 'p', '\x2', '\x2', ',', '-', '\a', 'i', '\x2', 
		'\x2', '-', '\x6', '\x3', '\x2', '\x2', '\x2', '.', '\x32', '\a', '#', 
		'\x2', '\x2', '/', '\x31', '\v', '\x2', '\x2', '\x2', '\x30', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x34', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x35', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\f', '\x2', '\x2', '\x36', 
		'\b', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '.', '\x2', '\x2', 
		'\x38', '\n', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '=', '\x2', 
		'\x2', ':', '\f', '\x3', '\x2', '\x2', '\x2', ';', '=', '\a', '/', '\x2', 
		'\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', 
		'\x2', '=', '\x46', '\x3', '\x2', '\x2', '\x2', '>', '\x42', '\t', '\x2', 
		'\x2', '\x2', '?', '\x41', '\t', '\x3', '\x2', '\x2', '@', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x43', 'G', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x45', 'G', '\a', '\x32', '\x2', '\x2', '\x46', 
		'>', '\x3', '\x2', '\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'N', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\a', '\x30', '\x2', 
		'\x2', 'I', 'K', '\t', '\x3', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'H', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'Y', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\t', '\x4', '\x2', 
		'\x2', 'Q', 'S', '\a', '/', '\x2', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'V', '\t', '\x3', '\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'P', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '\xE', '\x3', '\x2', '\x2', '\x2', '[', '_', '\t', '\x5', 
		'\x2', '\x2', '\\', '^', '\n', '\x6', '\x2', '\x2', ']', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '\x61', '\x3', '\x2', '\x2', '\x2', '_', ']', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\t', '\x5', '\x2', '\x2', '\x63', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\t', '\a', '\x2', '\x2', '\x65', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\b', '\t', '\x2', '\x2', 
		'g', '\x12', '\x3', '\x2', '\x2', '\x2', '\r', '\x2', '\x32', '<', '\x42', 
		'\x46', 'L', 'N', 'R', 'W', 'Y', '_', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
