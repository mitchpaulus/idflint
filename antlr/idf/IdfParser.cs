//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Idf.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class IdfParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, COMMENT=3, FIELD_SEPARATOR=4, OBJECT_TERMINATOR=5, NUMERIC=6, 
		ALPHA=7, WS=8;
	public const int
		RULE_idf = 0, RULE_object = 1, RULE_fields = 2, RULE_field = 3, RULE_object_type = 4;
	public static readonly string[] ruleNames = {
		"idf", "object", "fields", "field", "object_type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'SimulationControl'", "'Building'", null, "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "COMMENT", "FIELD_SEPARATOR", "OBJECT_TERMINATOR", "NUMERIC", 
		"ALPHA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static IdfParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IdfParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IdfParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IdfContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(IdfParser.Eof, 0); }
		public ITerminalNode[] COMMENT() { return GetTokens(IdfParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(IdfParser.COMMENT, i);
		}
		public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		public IdfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idf; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterIdf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitIdf(this);
		}
	}

	[RuleVersion(0)]
	public IdfContext idf() {
		IdfContext _localctx = new IdfContext(Context, State);
		EnterRule(_localctx, 0, RULE_idf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << COMMENT))) != 0)) {
				{
				State = 12;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMENT:
					{
					State = 10; Match(COMMENT);
					}
					break;
				case T__0:
				case T__1:
					{
					State = 11; @object();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 16;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 17; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public Object_typeContext object_type() {
			return GetRuleContext<Object_typeContext>(0);
		}
		public ITerminalNode FIELD_SEPARATOR() { return GetToken(IdfParser.FIELD_SEPARATOR, 0); }
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public ITerminalNode[] COMMENT() { return GetTokens(IdfParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(IdfParser.COMMENT, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 2, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19; object_type();
			State = 20; Match(FIELD_SEPARATOR);
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 21; Match(COMMENT);
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 27; fields();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public ITerminalNode OBJECT_TERMINATOR() { return GetToken(IdfParser.OBJECT_TERMINATOR, 0); }
		public ITerminalNode[] FIELD_SEPARATOR() { return GetTokens(IdfParser.FIELD_SEPARATOR); }
		public ITerminalNode FIELD_SEPARATOR(int i) {
			return GetToken(IdfParser.FIELD_SEPARATOR, i);
		}
		public ITerminalNode[] COMMENT() { return GetTokens(IdfParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(IdfParser.COMMENT, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 4, RULE_fields);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; field();
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FIELD_SEPARATOR) {
				{
				{
				State = 30; Match(FIELD_SEPARATOR);
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMENT) {
					{
					{
					State = 31; Match(COMMENT);
					}
					}
					State = 36;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 37; field();
				}
				}
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43; Match(OBJECT_TERMINATOR);
			State = 47;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 44; Match(COMMENT);
					}
					} 
				}
				State = 49;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode NUMERIC() { return GetToken(IdfParser.NUMERIC, 0); }
		public ITerminalNode ALPHA() { return GetToken(IdfParser.ALPHA, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 6, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMERIC || _la==ALPHA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_typeContext : ParserRuleContext {
		public Object_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterObject_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitObject_type(this);
		}
	}

	[RuleVersion(0)]
	public Object_typeContext object_type() {
		Object_typeContext _localctx = new Object_typeContext(Context, State);
		EnterRule(_localctx, 8, RULE_object_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '\x39', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xF', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x12', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x19', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1C', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '#', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '&', '\v', '\x4', '\x3', '\x4', 
		'\a', '\x4', ')', '\n', '\x4', '\f', '\x4', '\xE', '\x4', ',', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x30', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '\x33', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', 
		'\b', '\n', '\x2', '\x4', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\x3', 
		'\x4', '\x2', '\x39', '\x2', '\x10', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x34', '\x3', '\x2', '\x2', '\x2', '\n', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xF', '\a', '\x5', '\x2', '\x2', '\r', '\xF', 
		'\x5', '\x4', '\x3', '\x2', '\xE', '\f', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\xE', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x13', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\a', '\x2', '\x2', 
		'\x3', '\x14', '\x3', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x5', 
		'\n', '\x6', '\x2', '\x16', '\x1A', '\a', '\x6', '\x2', '\x2', '\x17', 
		'\x19', '\a', '\x5', '\x2', '\x2', '\x18', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\x5', '\x6', '\x4', '\x2', '\x1E', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '*', '\x5', '\b', '\x5', '\x2', ' ', '$', 
		'\a', '\x6', '\x2', '\x2', '!', '#', '\a', '\x5', '\x2', '\x2', '\"', 
		'!', '\x3', '\x2', '\x2', '\x2', '#', '&', '\x3', '\x2', '\x2', '\x2', 
		'$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', 
		'\x2', '%', '\'', '\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', 
		'\x2', '\x2', '\'', ')', '\x5', '\b', '\x5', '\x2', '(', ' ', '\x3', '\x2', 
		'\x2', '\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', '-', '\x3', '\x2', 
		'\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '-', '\x31', '\a', 
		'\a', '\x2', '\x2', '.', '\x30', '\a', '\x5', '\x2', '\x2', '/', '.', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\a', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\t', '\x2', '\x2', '\x2', 
		'\x35', '\t', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\t', '\x3', 
		'\x2', '\x2', '\x37', '\v', '\x3', '\x2', '\x2', '\x2', '\b', '\xE', '\x10', 
		'\x1A', '$', '*', '\x31',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
