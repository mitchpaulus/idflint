//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Idd.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class IddParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		GROUPSTATEMENT=1, AUTOCALCULATABLE_STATEMENT=2, AUTOSIZABLE_STATEMENT=3, 
		BEGIN_EXTENSIBLE_STATEMENT=4, DEFAULT_STATEMENT=5, DEPRECATED_STATEMENT=6, 
		EXTENSIBLE_STATEMENT=7, EXTERNAL_LIST_STATEMENT=8, FIELD_STATEMENT=9, 
		FORMAT_STATEMENT=10, GROUP_STATEMENT=11, IP_UNITS_STATEMENT=12, KEY_STATEMENT=13, 
		MAXIMUM_STATEMENT=14, MEMO_STATEMENT=15, MIN_FIELDS_STATEMENT=16, MINIMUM_STATEMENT=17, 
		NOTE_STATEMENT=18, OBJECT_LIST_STATEMENT=19, OBSOLETE_STATEMENT=20, REFERENCE_STATEMENT=21, 
		REFERENCE_CLASS_NAME_STATEMENT=22, REQUIRED_FIELD_STATEMENT=23, REQUIRED_OBJECT_STATEMENT=24, 
		RETAINCASE_STATEMENT=25, TYPE_STATEMENT=26, UNIQUE_OBJECT_STATEMENT=27, 
		UNITS_STATEMENT=28, GENERAL_PROPERTY=29, ALPHA_OPTION=30, NUMERIC_OPTION=31, 
		OBJECT_NAME=32, COMMENT=33, FIELD_SEPARATOR=34, OBJECT_TERMINATOR=35, 
		NEWLINE=36, WS=37;
	public const int
		RULE_idd = 0, RULE_object = 1, RULE_object_header = 2, RULE_fields = 3, 
		RULE_terminating_field = 4, RULE_field = 5, RULE_field_id = 6, RULE_group = 7, 
		RULE_object_properties = 8, RULE_field_properties = 9, RULE_object_property = 10, 
		RULE_field_property = 11;
	public static readonly string[] ruleNames = {
		"idd", "object", "object_header", "fields", "terminating_field", "field", 
		"field_id", "group", "object_properties", "field_properties", "object_property", 
		"field_property"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "GROUPSTATEMENT", "AUTOCALCULATABLE_STATEMENT", "AUTOSIZABLE_STATEMENT", 
		"BEGIN_EXTENSIBLE_STATEMENT", "DEFAULT_STATEMENT", "DEPRECATED_STATEMENT", 
		"EXTENSIBLE_STATEMENT", "EXTERNAL_LIST_STATEMENT", "FIELD_STATEMENT", 
		"FORMAT_STATEMENT", "GROUP_STATEMENT", "IP_UNITS_STATEMENT", "KEY_STATEMENT", 
		"MAXIMUM_STATEMENT", "MEMO_STATEMENT", "MIN_FIELDS_STATEMENT", "MINIMUM_STATEMENT", 
		"NOTE_STATEMENT", "OBJECT_LIST_STATEMENT", "OBSOLETE_STATEMENT", "REFERENCE_STATEMENT", 
		"REFERENCE_CLASS_NAME_STATEMENT", "REQUIRED_FIELD_STATEMENT", "REQUIRED_OBJECT_STATEMENT", 
		"RETAINCASE_STATEMENT", "TYPE_STATEMENT", "UNIQUE_OBJECT_STATEMENT", "UNITS_STATEMENT", 
		"GENERAL_PROPERTY", "ALPHA_OPTION", "NUMERIC_OPTION", "OBJECT_NAME", "COMMENT", 
		"FIELD_SEPARATOR", "OBJECT_TERMINATOR", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idd.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static IddParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IddParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IddParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IddContext : ParserRuleContext {
		public ITerminalNode[] COMMENT() { return GetTokens(IddParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(IddParser.COMMENT, i);
		}
		public GroupContext[] group() {
			return GetRuleContexts<GroupContext>();
		}
		public GroupContext group(int i) {
			return GetRuleContext<GroupContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(IddParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(IddParser.NEWLINE, i);
		}
		public IddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idd; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterIdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitIdd(this);
		}
	}

	[RuleVersion(0)]
	public IddContext idd() {
		IddContext _localctx = new IddContext(Context, State);
		EnterRule(_localctx, 0, RULE_idd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GROUPSTATEMENT) | (1L << COMMENT) | (1L << NEWLINE))) != 0)) {
				{
				State = 27;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMENT:
					{
					State = 24; Match(COMMENT);
					}
					break;
				case GROUPSTATEMENT:
					{
					State = 25; group();
					}
					break;
				case NEWLINE:
					{
					State = 26; Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public Object_headerContext object_header() {
			return GetRuleContext<Object_headerContext>(0);
		}
		public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 2, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; object_header();
			State = 33; fields();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_headerContext : ParserRuleContext {
		public ITerminalNode OBJECT_NAME() { return GetToken(IddParser.OBJECT_NAME, 0); }
		public ITerminalNode FIELD_SEPARATOR() { return GetToken(IddParser.FIELD_SEPARATOR, 0); }
		public Object_propertiesContext object_properties() {
			return GetRuleContext<Object_propertiesContext>(0);
		}
		public ITerminalNode[] COMMENT() { return GetTokens(IddParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(IddParser.COMMENT, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(IddParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(IddParser.NEWLINE, i);
		}
		public Object_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterObject_header(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitObject_header(this);
		}
	}

	[RuleVersion(0)]
	public Object_headerContext object_header() {
		Object_headerContext _localctx = new Object_headerContext(Context, State);
		EnterRule(_localctx, 4, RULE_object_header);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(OBJECT_NAME);
			State = 36; Match(FIELD_SEPARATOR);
			State = 40;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 37;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMENT || _la==NEWLINE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 43; object_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		public Terminating_fieldContext terminating_field() {
			return GetRuleContext<Terminating_fieldContext>(0);
		}
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 6, RULE_fields);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 45; field();
					}
					} 
				}
				State = 50;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 51; terminating_field();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminating_fieldContext : ParserRuleContext {
		public Field_idContext field_id() {
			return GetRuleContext<Field_idContext>(0);
		}
		public ITerminalNode OBJECT_TERMINATOR() { return GetToken(IddParser.OBJECT_TERMINATOR, 0); }
		public Field_propertiesContext field_properties() {
			return GetRuleContext<Field_propertiesContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(IddParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(IddParser.NEWLINE, i);
		}
		public Terminating_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminating_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterTerminating_field(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitTerminating_field(this);
		}
	}

	[RuleVersion(0)]
	public Terminating_fieldContext terminating_field() {
		Terminating_fieldContext _localctx = new Terminating_fieldContext(Context, State);
		EnterRule(_localctx, 8, RULE_terminating_field);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; field_id();
			State = 54; Match(OBJECT_TERMINATOR);
			State = 58;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 55; Match(NEWLINE);
					}
					} 
				}
				State = 60;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 61; field_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public Field_idContext field_id() {
			return GetRuleContext<Field_idContext>(0);
		}
		public ITerminalNode FIELD_SEPARATOR() { return GetToken(IddParser.FIELD_SEPARATOR, 0); }
		public Field_propertiesContext field_properties() {
			return GetRuleContext<Field_propertiesContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(IddParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(IddParser.NEWLINE, i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 10, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; field_id();
			State = 64; Match(FIELD_SEPARATOR);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 65; Match(NEWLINE);
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71; field_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_idContext : ParserRuleContext {
		public ITerminalNode ALPHA_OPTION() { return GetToken(IddParser.ALPHA_OPTION, 0); }
		public ITerminalNode NUMERIC_OPTION() { return GetToken(IddParser.NUMERIC_OPTION, 0); }
		public Field_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterField_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitField_id(this);
		}
	}

	[RuleVersion(0)]
	public Field_idContext field_id() {
		Field_idContext _localctx = new Field_idContext(Context, State);
		EnterRule(_localctx, 12, RULE_field_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_la = TokenStream.LA(1);
			if ( !(_la==ALPHA_OPTION || _la==NUMERIC_OPTION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		public ITerminalNode GROUPSTATEMENT() { return GetToken(IddParser.GROUPSTATEMENT, 0); }
		public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		public ITerminalNode[] COMMENT() { return GetTokens(IddParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(IddParser.COMMENT, i);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 14, RULE_group);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(GROUPSTATEMENT);
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 78;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OBJECT_NAME:
						{
						State = 76; @object();
						}
						break;
					case COMMENT:
						{
						State = 77; Match(COMMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_propertiesContext : ParserRuleContext {
		public Object_propertyContext[] object_property() {
			return GetRuleContexts<Object_propertyContext>();
		}
		public Object_propertyContext object_property(int i) {
			return GetRuleContext<Object_propertyContext>(i);
		}
		public ITerminalNode[] COMMENT() { return GetTokens(IddParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(IddParser.COMMENT, i);
		}
		public Object_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_properties; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterObject_properties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitObject_properties(this);
		}
	}

	[RuleVersion(0)]
	public Object_propertiesContext object_properties() {
		Object_propertiesContext _localctx = new Object_propertiesContext(Context, State);
		EnterRule(_localctx, 16, RULE_object_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXTENSIBLE_STATEMENT) | (1L << FORMAT_STATEMENT) | (1L << MEMO_STATEMENT) | (1L << MIN_FIELDS_STATEMENT) | (1L << OBSOLETE_STATEMENT) | (1L << REQUIRED_OBJECT_STATEMENT) | (1L << UNIQUE_OBJECT_STATEMENT) | (1L << COMMENT))) != 0)) {
				{
				State = 85;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXTENSIBLE_STATEMENT:
				case FORMAT_STATEMENT:
				case MEMO_STATEMENT:
				case MIN_FIELDS_STATEMENT:
				case OBSOLETE_STATEMENT:
				case REQUIRED_OBJECT_STATEMENT:
				case UNIQUE_OBJECT_STATEMENT:
					{
					State = 83; object_property();
					}
					break;
				case COMMENT:
					{
					State = 84; Match(COMMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_propertiesContext : ParserRuleContext {
		public Field_propertyContext[] field_property() {
			return GetRuleContexts<Field_propertyContext>();
		}
		public Field_propertyContext field_property(int i) {
			return GetRuleContext<Field_propertyContext>(i);
		}
		public ITerminalNode[] COMMENT() { return GetTokens(IddParser.COMMENT); }
		public ITerminalNode COMMENT(int i) {
			return GetToken(IddParser.COMMENT, i);
		}
		public Field_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_properties; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterField_properties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitField_properties(this);
		}
	}

	[RuleVersion(0)]
	public Field_propertiesContext field_properties() {
		Field_propertiesContext _localctx = new Field_propertiesContext(Context, State);
		EnterRule(_localctx, 18, RULE_field_properties);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 92;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AUTOCALCULATABLE_STATEMENT:
					case AUTOSIZABLE_STATEMENT:
					case BEGIN_EXTENSIBLE_STATEMENT:
					case DEFAULT_STATEMENT:
					case DEPRECATED_STATEMENT:
					case EXTERNAL_LIST_STATEMENT:
					case FIELD_STATEMENT:
					case GROUP_STATEMENT:
					case IP_UNITS_STATEMENT:
					case KEY_STATEMENT:
					case MAXIMUM_STATEMENT:
					case MINIMUM_STATEMENT:
					case NOTE_STATEMENT:
					case OBJECT_LIST_STATEMENT:
					case REFERENCE_STATEMENT:
					case REFERENCE_CLASS_NAME_STATEMENT:
					case REQUIRED_FIELD_STATEMENT:
					case RETAINCASE_STATEMENT:
					case TYPE_STATEMENT:
					case UNITS_STATEMENT:
					case GENERAL_PROPERTY:
						{
						State = 90; field_property();
						}
						break;
					case COMMENT:
						{
						State = 91; Match(COMMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_propertyContext : ParserRuleContext {
		public ITerminalNode EXTENSIBLE_STATEMENT() { return GetToken(IddParser.EXTENSIBLE_STATEMENT, 0); }
		public ITerminalNode FORMAT_STATEMENT() { return GetToken(IddParser.FORMAT_STATEMENT, 0); }
		public ITerminalNode MEMO_STATEMENT() { return GetToken(IddParser.MEMO_STATEMENT, 0); }
		public ITerminalNode MIN_FIELDS_STATEMENT() { return GetToken(IddParser.MIN_FIELDS_STATEMENT, 0); }
		public ITerminalNode OBSOLETE_STATEMENT() { return GetToken(IddParser.OBSOLETE_STATEMENT, 0); }
		public ITerminalNode REQUIRED_OBJECT_STATEMENT() { return GetToken(IddParser.REQUIRED_OBJECT_STATEMENT, 0); }
		public ITerminalNode UNIQUE_OBJECT_STATEMENT() { return GetToken(IddParser.UNIQUE_OBJECT_STATEMENT, 0); }
		public Object_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterObject_property(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitObject_property(this);
		}
	}

	[RuleVersion(0)]
	public Object_propertyContext object_property() {
		Object_propertyContext _localctx = new Object_propertyContext(Context, State);
		EnterRule(_localctx, 20, RULE_object_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXTENSIBLE_STATEMENT) | (1L << FORMAT_STATEMENT) | (1L << MEMO_STATEMENT) | (1L << MIN_FIELDS_STATEMENT) | (1L << OBSOLETE_STATEMENT) | (1L << REQUIRED_OBJECT_STATEMENT) | (1L << UNIQUE_OBJECT_STATEMENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_propertyContext : ParserRuleContext {
		public ITerminalNode AUTOCALCULATABLE_STATEMENT() { return GetToken(IddParser.AUTOCALCULATABLE_STATEMENT, 0); }
		public ITerminalNode AUTOSIZABLE_STATEMENT() { return GetToken(IddParser.AUTOSIZABLE_STATEMENT, 0); }
		public ITerminalNode BEGIN_EXTENSIBLE_STATEMENT() { return GetToken(IddParser.BEGIN_EXTENSIBLE_STATEMENT, 0); }
		public ITerminalNode DEFAULT_STATEMENT() { return GetToken(IddParser.DEFAULT_STATEMENT, 0); }
		public ITerminalNode DEPRECATED_STATEMENT() { return GetToken(IddParser.DEPRECATED_STATEMENT, 0); }
		public ITerminalNode EXTERNAL_LIST_STATEMENT() { return GetToken(IddParser.EXTERNAL_LIST_STATEMENT, 0); }
		public ITerminalNode FIELD_STATEMENT() { return GetToken(IddParser.FIELD_STATEMENT, 0); }
		public ITerminalNode GROUP_STATEMENT() { return GetToken(IddParser.GROUP_STATEMENT, 0); }
		public ITerminalNode IP_UNITS_STATEMENT() { return GetToken(IddParser.IP_UNITS_STATEMENT, 0); }
		public ITerminalNode KEY_STATEMENT() { return GetToken(IddParser.KEY_STATEMENT, 0); }
		public ITerminalNode MAXIMUM_STATEMENT() { return GetToken(IddParser.MAXIMUM_STATEMENT, 0); }
		public ITerminalNode MINIMUM_STATEMENT() { return GetToken(IddParser.MINIMUM_STATEMENT, 0); }
		public ITerminalNode NOTE_STATEMENT() { return GetToken(IddParser.NOTE_STATEMENT, 0); }
		public ITerminalNode OBJECT_LIST_STATEMENT() { return GetToken(IddParser.OBJECT_LIST_STATEMENT, 0); }
		public ITerminalNode REFERENCE_STATEMENT() { return GetToken(IddParser.REFERENCE_STATEMENT, 0); }
		public ITerminalNode REFERENCE_CLASS_NAME_STATEMENT() { return GetToken(IddParser.REFERENCE_CLASS_NAME_STATEMENT, 0); }
		public ITerminalNode REQUIRED_FIELD_STATEMENT() { return GetToken(IddParser.REQUIRED_FIELD_STATEMENT, 0); }
		public ITerminalNode RETAINCASE_STATEMENT() { return GetToken(IddParser.RETAINCASE_STATEMENT, 0); }
		public ITerminalNode TYPE_STATEMENT() { return GetToken(IddParser.TYPE_STATEMENT, 0); }
		public ITerminalNode UNITS_STATEMENT() { return GetToken(IddParser.UNITS_STATEMENT, 0); }
		public ITerminalNode GENERAL_PROPERTY() { return GetToken(IddParser.GENERAL_PROPERTY, 0); }
		public Field_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterField_property(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitField_property(this);
		}
	}

	[RuleVersion(0)]
	public Field_propertyContext field_property() {
		Field_propertyContext _localctx = new Field_propertyContext(Context, State);
		EnterRule(_localctx, 22, RULE_field_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTOCALCULATABLE_STATEMENT) | (1L << AUTOSIZABLE_STATEMENT) | (1L << BEGIN_EXTENSIBLE_STATEMENT) | (1L << DEFAULT_STATEMENT) | (1L << DEPRECATED_STATEMENT) | (1L << EXTERNAL_LIST_STATEMENT) | (1L << FIELD_STATEMENT) | (1L << GROUP_STATEMENT) | (1L << IP_UNITS_STATEMENT) | (1L << KEY_STATEMENT) | (1L << MAXIMUM_STATEMENT) | (1L << MINIMUM_STATEMENT) | (1L << NOTE_STATEMENT) | (1L << OBJECT_LIST_STATEMENT) | (1L << REFERENCE_STATEMENT) | (1L << REFERENCE_CLASS_NAME_STATEMENT) | (1L << REQUIRED_FIELD_STATEMENT) | (1L << RETAINCASE_STATEMENT) | (1L << TYPE_STATEMENT) | (1L << UNITS_STATEMENT) | (1L << GENERAL_PROPERTY))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', 'h', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', 
		'\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x1E', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'!', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', ')', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', ',', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\a', '\x5', '\x31', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x34', '\v', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', ';', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '>', 
		'\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', '\x45', '\n', '\a', '\f', '\a', '\xE', '\a', 'H', '\v', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', 'Q', '\n', '\t', '\f', '\t', '\xE', 
		'\t', 'T', '\v', '\t', '\x3', '\n', '\x3', '\n', '\a', '\n', 'X', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '[', '\v', '\n', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '_', '\n', '\v', '\f', '\v', '\xE', '\v', '\x62', '\v', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x2', 
		'\x2', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x2', '\x6', '\x4', '\x2', '#', '#', '&', '&', 
		'\x3', '\x2', ' ', '!', '\b', '\x2', '\t', '\t', '\f', '\f', '\x11', '\x12', 
		'\x16', '\x16', '\x1A', '\x1A', '\x1D', '\x1D', '\t', '\x2', '\x4', '\b', 
		'\n', '\v', '\r', '\x10', '\x13', '\x15', '\x17', '\x19', '\x1B', '\x1C', 
		'\x1E', '\x1F', '\x2', 'h', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\"', '\x3', '\x2', '\x2', '\x2', '\x6', '%', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x32', '\x3', '\x2', '\x2', '\x2', '\n', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x41', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x10', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'Y', '\x3', '\x2', '\x2', '\x2', '\x14', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x63', '\x3', '\x2', '\x2', '\x2', '\x18', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1E', '\a', '#', '\x2', '\x2', '\x1B', 
		'\x1E', '\x5', '\x10', '\t', '\x2', '\x1C', '\x1E', '\a', '&', '\x2', 
		'\x2', '\x1D', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x5', 
		'\x6', '\x4', '\x2', '#', '$', '\x5', '\b', '\x5', '\x2', '$', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '%', '&', '\a', '\"', '\x2', '\x2', '&', '*', 
		'\a', '$', '\x2', '\x2', '\'', ')', '\t', '\x2', '\x2', '\x2', '(', '\'', 
		'\x3', '\x2', '\x2', '\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', '*', 
		'(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', '-', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x5', '\x12', '\n', '\x2', '.', '\a', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x31', '\x5', '\f', '\a', '\x2', '\x30', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x34', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x35', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x36', '\x5', '\n', '\x6', '\x2', '\x36', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x5', '\xE', '\b', '\x2', 
		'\x38', '<', '\a', '%', '\x2', '\x2', '\x39', ';', '\a', '&', '\x2', '\x2', 
		':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x3', '\x2', '\x2', 
		'\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', 
		'\x2', '=', '?', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\x5', '\x14', '\v', '\x2', '@', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\x5', '\xE', '\b', '\x2', '\x42', '\x46', 
		'\a', '$', '\x2', '\x2', '\x43', '\x45', '\a', '&', '\x2', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x5', '\x14', '\v', '\x2', 'J', 
		'\r', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\t', '\x3', '\x2', '\x2', 
		'L', '\xF', '\x3', '\x2', '\x2', '\x2', 'M', 'R', '\a', '\x3', '\x2', 
		'\x2', 'N', 'Q', '\x5', '\x4', '\x3', '\x2', 'O', 'Q', '\a', '#', '\x2', 
		'\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x5', '\x16', 
		'\f', '\x2', 'V', 'X', '\a', '#', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x13', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\\', '_', '\x5', '\x18', '\r', '\x2', ']', '_', 
		'\a', '#', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', ']', 
		'\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', '\x2', '\x2', '`', 
		'^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x15', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x64', '\t', '\x4', '\x2', '\x2', '\x64', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\t', '\x5', '\x2', '\x2', 
		'\x66', '\x19', '\x3', '\x2', '\x2', '\x2', '\xE', '\x1D', '\x1F', '*', 
		'\x32', '<', '\x46', 'P', 'R', 'W', 'Y', '^', '`',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
