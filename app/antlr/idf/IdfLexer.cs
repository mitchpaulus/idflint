//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Idf.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class IdfLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, FIELD_SEPARATOR=2, OBJECT_TERMINATOR=3, NUMERIC=4, ALPHA=5, 
		WS=6;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "FIELD_SEPARATOR", "OBJECT_TERMINATOR", "NUMERIC", "ALPHA", 
		"WS"
	};


	public IdfLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public IdfLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "FIELD_SEPARATOR", "OBJECT_TERMINATOR", "NUMERIC", "ALPHA", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static IdfLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,6,84,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,
		5,0,16,8,0,10,0,12,0,19,9,0,1,0,3,0,22,8,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
		3,3,31,8,3,1,3,1,3,5,3,35,8,3,10,3,12,3,38,9,3,1,3,3,3,41,8,3,1,3,1,3,
		5,3,45,8,3,10,3,12,3,48,9,3,3,3,50,8,3,1,3,1,3,4,3,54,8,3,11,3,12,3,55,
		3,3,58,8,3,1,3,1,3,3,3,62,8,3,1,3,4,3,65,8,3,11,3,12,3,66,3,3,69,8,3,1,
		4,1,4,5,4,73,8,4,10,4,12,4,76,9,4,1,5,4,5,79,8,5,11,5,12,5,80,1,5,1,5,
		1,17,0,6,1,1,3,2,5,3,7,4,9,5,11,6,1,0,6,1,0,49,57,1,0,48,57,2,0,69,69,
		101,101,5,0,9,10,13,13,32,33,44,44,59,59,5,0,10,10,13,13,33,33,44,44,59,
		59,3,0,9,10,13,13,32,32,97,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
		0,0,0,9,1,0,0,0,0,11,1,0,0,0,1,13,1,0,0,0,3,25,1,0,0,0,5,27,1,0,0,0,7,
		30,1,0,0,0,9,70,1,0,0,0,11,78,1,0,0,0,13,17,5,33,0,0,14,16,9,0,0,0,15,
		14,1,0,0,0,16,19,1,0,0,0,17,18,1,0,0,0,17,15,1,0,0,0,18,21,1,0,0,0,19,
		17,1,0,0,0,20,22,5,13,0,0,21,20,1,0,0,0,21,22,1,0,0,0,22,23,1,0,0,0,23,
		24,5,10,0,0,24,2,1,0,0,0,25,26,5,44,0,0,26,4,1,0,0,0,27,28,5,59,0,0,28,
		6,1,0,0,0,29,31,5,45,0,0,30,29,1,0,0,0,30,31,1,0,0,0,31,57,1,0,0,0,32,
		36,7,0,0,0,33,35,7,1,0,0,34,33,1,0,0,0,35,38,1,0,0,0,36,34,1,0,0,0,36,
		37,1,0,0,0,37,41,1,0,0,0,38,36,1,0,0,0,39,41,5,48,0,0,40,32,1,0,0,0,40,
		39,1,0,0,0,41,49,1,0,0,0,42,46,5,46,0,0,43,45,7,1,0,0,44,43,1,0,0,0,45,
		48,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,49,
		42,1,0,0,0,49,50,1,0,0,0,50,58,1,0,0,0,51,53,5,46,0,0,52,54,7,1,0,0,53,
		52,1,0,0,0,54,55,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,
		40,1,0,0,0,57,51,1,0,0,0,58,68,1,0,0,0,59,61,7,2,0,0,60,62,5,45,0,0,61,
		60,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,65,7,1,0,0,64,63,1,0,0,0,65,
		66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,59,1,0,0,0,68,
		69,1,0,0,0,69,8,1,0,0,0,70,74,8,3,0,0,71,73,8,4,0,0,72,71,1,0,0,0,73,76,
		1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,10,1,0,0,0,76,74,1,0,0,0,77,79,
		7,5,0,0,78,77,1,0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,82,
		1,0,0,0,82,83,6,5,0,0,83,12,1,0,0,0,15,0,17,21,30,36,40,46,49,55,57,61,
		66,68,74,80,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
