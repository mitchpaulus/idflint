//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Idf.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class IdfParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, FIELD_SEPARATOR=2, OBJECT_TERMINATOR=3, NUMERIC=4, ALPHA=5, 
		WS=6;
	public const int
		RULE_idf = 0, RULE_object = 1, RULE_fields = 2, RULE_field = 3;
	public static readonly string[] ruleNames = {
		"idf", "object", "fields", "field"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "FIELD_SEPARATOR", "OBJECT_TERMINATOR", "NUMERIC", "ALPHA", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idf.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static IdfParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IdfParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IdfParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IdfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(IdfParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(IdfParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(IdfParser.COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		public IdfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterIdf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitIdf(this);
		}
	}

	[RuleVersion(0)]
	public IdfContext idf() {
		IdfContext _localctx = new IdfContext(Context, State);
		EnterRule(_localctx, 0, RULE_idf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT || _la==ALPHA) {
				{
				State = 10;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMENT:
					{
					State = 8;
					Match(COMMENT);
					}
					break;
				case ALPHA:
					{
					State = 9;
					@object();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 14;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 15;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHA() { return GetToken(IdfParser.ALPHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD_SEPARATOR() { return GetToken(IdfParser.FIELD_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(IdfParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(IdfParser.COMMENT, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 2, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			Match(ALPHA);
			State = 18;
			Match(FIELD_SEPARATOR);
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 19;
				Match(COMMENT);
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 25;
			fields();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_TERMINATOR() { return GetToken(IdfParser.OBJECT_TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FIELD_SEPARATOR() { return GetTokens(IdfParser.FIELD_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD_SEPARATOR(int i) {
			return GetToken(IdfParser.FIELD_SEPARATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(IdfParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(IdfParser.COMMENT, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 4, RULE_fields);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			field();
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FIELD_SEPARATOR) {
				{
				{
				State = 28;
				Match(FIELD_SEPARATOR);
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMENT) {
					{
					{
					State = 29;
					Match(COMMENT);
					}
					}
					State = 34;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 35;
				field();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 41;
			Match(OBJECT_TERMINATOR);
			State = 45;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 42;
					Match(COMMENT);
					}
					} 
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(IdfParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHA() { return GetToken(IdfParser.ALPHA, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIdfListener typedListener = listener as IIdfListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 6, RULE_field);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMERIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				Match(NUMERIC);
				}
				break;
			case ALPHA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				Match(ALPHA);
				}
				break;
			case FIELD_SEPARATOR:
			case OBJECT_TERMINATOR:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,6,54,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,5,0,11,8,0,10,0,12,0,
		14,9,0,1,0,1,0,1,1,1,1,1,1,5,1,21,8,1,10,1,12,1,24,9,1,1,1,1,1,1,2,1,2,
		1,2,5,2,31,8,2,10,2,12,2,34,9,2,1,2,5,2,37,8,2,10,2,12,2,40,9,2,1,2,1,
		2,5,2,44,8,2,10,2,12,2,47,9,2,1,3,1,3,1,3,3,3,52,8,3,1,3,0,0,4,0,2,4,6,
		0,0,57,0,12,1,0,0,0,2,17,1,0,0,0,4,27,1,0,0,0,6,51,1,0,0,0,8,11,5,1,0,
		0,9,11,3,2,1,0,10,8,1,0,0,0,10,9,1,0,0,0,11,14,1,0,0,0,12,10,1,0,0,0,12,
		13,1,0,0,0,13,15,1,0,0,0,14,12,1,0,0,0,15,16,5,0,0,1,16,1,1,0,0,0,17,18,
		5,5,0,0,18,22,5,2,0,0,19,21,5,1,0,0,20,19,1,0,0,0,21,24,1,0,0,0,22,20,
		1,0,0,0,22,23,1,0,0,0,23,25,1,0,0,0,24,22,1,0,0,0,25,26,3,4,2,0,26,3,1,
		0,0,0,27,38,3,6,3,0,28,32,5,2,0,0,29,31,5,1,0,0,30,29,1,0,0,0,31,34,1,
		0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,35,1,0,0,0,34,32,1,0,0,0,35,37,3,
		6,3,0,36,28,1,0,0,0,37,40,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,41,1,
		0,0,0,40,38,1,0,0,0,41,45,5,3,0,0,42,44,5,1,0,0,43,42,1,0,0,0,44,47,1,
		0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,5,1,0,0,0,47,45,1,0,0,0,48,52,5,4,
		0,0,49,52,5,5,0,0,50,52,1,0,0,0,51,48,1,0,0,0,51,49,1,0,0,0,51,50,1,0,
		0,0,52,7,1,0,0,0,7,10,12,22,32,38,45,51
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
