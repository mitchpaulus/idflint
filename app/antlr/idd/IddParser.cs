//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Idd.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class IddParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, FIELD_TYPE=8, 
		AUTOCALCULATABLE_STATEMENT=9, AUTOSIZABLE_STATEMENT=10, BEGIN_EXTENSIBLE_STATEMENT=11, 
		DEFAULT_STATEMENT=12, DEPRECATED_STATEMENT=13, EXTENSIBLE_STATEMENT=14, 
		EXTERNAL_LIST_STATEMENT=15, FIELD_STATEMENT=16, FORMAT_STATEMENT=17, GROUP_STATEMENT=18, 
		IP_UNITS_STATEMENT=19, KEY_STATEMENT=20, MEMO_STATEMENT=21, NOTE_STATEMENT=22, 
		OBJECT_LIST_STATEMENT=23, OBSOLETE_STATEMENT=24, REFERENCE_STATEMENT=25, 
		REFERENCE_CLASS_NAME_STATEMENT=26, REQUIRED_FIELD_STATEMENT=27, REQUIRED_OBJECT_STATEMENT=28, 
		RETAINCASE_STATEMENT=29, UNIQUE_OBJECT_STATEMENT=30, UNITS_STATEMENT=31, 
		INTEGER=32, REALNUMBER=33, ALPHA_OPTION=34, NUMERIC_OPTION=35, OBJECT_NAME=36, 
		COMMENT=37, FIELD_SEPARATOR=38, OBJECT_TERMINATOR=39, WS=40;
	public const int
		RULE_idd = 0, RULE_object = 1, RULE_object_header = 2, RULE_fields = 3, 
		RULE_terminating_field = 4, RULE_field = 5, RULE_field_id = 6, RULE_group = 7, 
		RULE_object_properties = 8, RULE_field_properties = 9, RULE_object_property = 10, 
		RULE_field_property = 11, RULE_maximum_exclusive_statement = 12, RULE_maximum_inclusive_statement = 13, 
		RULE_min_fields_statement = 14, RULE_minimum_exclusive_statement = 15, 
		RULE_minimum_inclusive_statement = 16, RULE_type_statement = 17, RULE_units_based_on_field_statement = 18;
	public static readonly string[] ruleNames = {
		"idd", "object", "object_header", "fields", "terminating_field", "field", 
		"field_id", "group", "object_properties", "field_properties", "object_property", 
		"field_property", "maximum_exclusive_statement", "maximum_inclusive_statement", 
		"min_fields_statement", "minimum_exclusive_statement", "minimum_inclusive_statement", 
		"type_statement", "units_based_on_field_statement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\maximum'", "'<'", "'\\min-fields '", "'\\minimum'", "'>'", "'\\type '", 
		"'\\unitsBasedOnField '", null, null, null, "'\\begin-extensible'", null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "','", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "FIELD_TYPE", "AUTOCALCULATABLE_STATEMENT", 
		"AUTOSIZABLE_STATEMENT", "BEGIN_EXTENSIBLE_STATEMENT", "DEFAULT_STATEMENT", 
		"DEPRECATED_STATEMENT", "EXTENSIBLE_STATEMENT", "EXTERNAL_LIST_STATEMENT", 
		"FIELD_STATEMENT", "FORMAT_STATEMENT", "GROUP_STATEMENT", "IP_UNITS_STATEMENT", 
		"KEY_STATEMENT", "MEMO_STATEMENT", "NOTE_STATEMENT", "OBJECT_LIST_STATEMENT", 
		"OBSOLETE_STATEMENT", "REFERENCE_STATEMENT", "REFERENCE_CLASS_NAME_STATEMENT", 
		"REQUIRED_FIELD_STATEMENT", "REQUIRED_OBJECT_STATEMENT", "RETAINCASE_STATEMENT", 
		"UNIQUE_OBJECT_STATEMENT", "UNITS_STATEMENT", "INTEGER", "REALNUMBER", 
		"ALPHA_OPTION", "NUMERIC_OPTION", "OBJECT_NAME", "COMMENT", "FIELD_SEPARATOR", 
		"OBJECT_TERMINATOR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Idd.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static IddParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IddParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IddParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IddContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(IddParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(IddParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(IddParser.COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext[] group() {
			return GetRuleContexts<GroupContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group(int i) {
			return GetRuleContext<GroupContext>(i);
		}
		public IddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterIdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitIdd(this);
		}
	}

	[RuleVersion(0)]
	public IddContext idd() {
		IddContext _localctx = new IddContext(Context, State);
		EnterRule(_localctx, 0, RULE_idd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==GROUP_STATEMENT || _la==COMMENT) {
				{
				State = 40;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMENT:
					{
					State = 38;
					Match(COMMENT);
					}
					break;
				case GROUP_STATEMENT:
					{
					State = 39;
					group();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 45;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_headerContext object_header() {
			return GetRuleContext<Object_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 2, RULE_object);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			object_header();
			State = 48;
			fields();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_NAME() { return GetToken(IddParser.OBJECT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD_SEPARATOR() { return GetToken(IddParser.FIELD_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Object_propertiesContext object_properties() {
			return GetRuleContext<Object_propertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(IddParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(IddParser.COMMENT, i);
		}
		public Object_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterObject_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitObject_header(this);
		}
	}

	[RuleVersion(0)]
	public Object_headerContext object_header() {
		Object_headerContext _localctx = new Object_headerContext(Context, State);
		EnterRule(_localctx, 4, RULE_object_header);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(OBJECT_NAME);
			State = 51;
			Match(FIELD_SEPARATOR);
			State = 55;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 52;
					Match(COMMENT);
					}
					} 
				}
				State = 57;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 58;
			object_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Terminating_fieldContext terminating_field() {
			return GetRuleContext<Terminating_fieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 6, RULE_fields);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 60;
					field();
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 66;
			terminating_field();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminating_fieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Field_idContext field_id() {
			return GetRuleContext<Field_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_TERMINATOR() { return GetToken(IddParser.OBJECT_TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_propertiesContext field_properties() {
			return GetRuleContext<Field_propertiesContext>(0);
		}
		public Terminating_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminating_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterTerminating_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitTerminating_field(this);
		}
	}

	[RuleVersion(0)]
	public Terminating_fieldContext terminating_field() {
		Terminating_fieldContext _localctx = new Terminating_fieldContext(Context, State);
		EnterRule(_localctx, 8, RULE_terminating_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			field_id();
			State = 69;
			Match(OBJECT_TERMINATOR);
			State = 70;
			field_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Field_idContext field_id() {
			return GetRuleContext<Field_idContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD_SEPARATOR() { return GetToken(IddParser.FIELD_SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_propertiesContext field_properties() {
			return GetRuleContext<Field_propertiesContext>(0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 10, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			field_id();
			State = 73;
			Match(FIELD_SEPARATOR);
			State = 74;
			field_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_idContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHA_OPTION() { return GetToken(IddParser.ALPHA_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_OPTION() { return GetToken(IddParser.NUMERIC_OPTION, 0); }
		public Field_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterField_id(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitField_id(this);
		}
	}

	[RuleVersion(0)]
	public Field_idContext field_id() {
		Field_idContext _localctx = new Field_idContext(Context, State);
		EnterRule(_localctx, 12, RULE_field_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_la = TokenStream.LA(1);
			if ( !(_la==ALPHA_OPTION || _la==NUMERIC_OPTION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_STATEMENT() { return GetToken(IddParser.GROUP_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(IddParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(IddParser.COMMENT, i);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 14, RULE_group);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(GROUP_STATEMENT);
			State = 83;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 81;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OBJECT_NAME:
						{
						State = 79;
						@object();
						}
						break;
					case COMMENT:
						{
						State = 80;
						Match(COMMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 85;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_propertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_propertyContext[] object_property() {
			return GetRuleContexts<Object_propertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_propertyContext object_property(int i) {
			return GetRuleContext<Object_propertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(IddParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(IddParser.COMMENT, i);
		}
		public Object_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_properties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterObject_properties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitObject_properties(this);
		}
	}

	[RuleVersion(0)]
	public Object_propertiesContext object_properties() {
		Object_propertiesContext _localctx = new Object_propertiesContext(Context, State);
		EnterRule(_localctx, 16, RULE_object_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 138800152584L) != 0)) {
				{
				State = 88;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case EXTENSIBLE_STATEMENT:
				case FORMAT_STATEMENT:
				case MEMO_STATEMENT:
				case OBSOLETE_STATEMENT:
				case REQUIRED_OBJECT_STATEMENT:
				case UNIQUE_OBJECT_STATEMENT:
					{
					State = 86;
					object_property();
					}
					break;
				case COMMENT:
					{
					State = 87;
					Match(COMMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_propertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Field_propertyContext[] field_property() {
			return GetRuleContexts<Field_propertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_propertyContext field_property(int i) {
			return GetRuleContext<Field_propertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(IddParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(IddParser.COMMENT, i);
		}
		public Field_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_properties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterField_properties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitField_properties(this);
		}
	}

	[RuleVersion(0)]
	public Field_propertiesContext field_properties() {
		Field_propertiesContext _localctx = new Field_propertiesContext(Context, State);
		EnterRule(_localctx, 18, RULE_field_properties);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 95;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__0:
					case T__3:
					case T__5:
					case T__6:
					case AUTOCALCULATABLE_STATEMENT:
					case AUTOSIZABLE_STATEMENT:
					case BEGIN_EXTENSIBLE_STATEMENT:
					case DEFAULT_STATEMENT:
					case DEPRECATED_STATEMENT:
					case EXTERNAL_LIST_STATEMENT:
					case FIELD_STATEMENT:
					case IP_UNITS_STATEMENT:
					case KEY_STATEMENT:
					case NOTE_STATEMENT:
					case OBJECT_LIST_STATEMENT:
					case REFERENCE_STATEMENT:
					case REFERENCE_CLASS_NAME_STATEMENT:
					case REQUIRED_FIELD_STATEMENT:
					case RETAINCASE_STATEMENT:
					case UNITS_STATEMENT:
						{
						State = 93;
						field_property();
						}
						break;
					case COMMENT:
						{
						State = 94;
						Match(COMMENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_propertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSIBLE_STATEMENT() { return GetToken(IddParser.EXTENSIBLE_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_STATEMENT() { return GetToken(IddParser.FORMAT_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMO_STATEMENT() { return GetToken(IddParser.MEMO_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Min_fields_statementContext min_fields_statement() {
			return GetRuleContext<Min_fields_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBSOLETE_STATEMENT() { return GetToken(IddParser.OBSOLETE_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED_OBJECT_STATEMENT() { return GetToken(IddParser.REQUIRED_OBJECT_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_OBJECT_STATEMENT() { return GetToken(IddParser.UNIQUE_OBJECT_STATEMENT, 0); }
		public Object_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterObject_property(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitObject_property(this);
		}
	}

	[RuleVersion(0)]
	public Object_propertyContext object_property() {
		Object_propertyContext _localctx = new Object_propertyContext(Context, State);
		EnterRule(_localctx, 20, RULE_object_property);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXTENSIBLE_STATEMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				Match(EXTENSIBLE_STATEMENT);
				}
				break;
			case FORMAT_STATEMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				Match(FORMAT_STATEMENT);
				}
				break;
			case MEMO_STATEMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				Match(MEMO_STATEMENT);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				min_fields_statement();
				}
				break;
			case OBSOLETE_STATEMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 104;
				Match(OBSOLETE_STATEMENT);
				}
				break;
			case REQUIRED_OBJECT_STATEMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 105;
				Match(REQUIRED_OBJECT_STATEMENT);
				}
				break;
			case UNIQUE_OBJECT_STATEMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 106;
				Match(UNIQUE_OBJECT_STATEMENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_propertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCALCULATABLE_STATEMENT() { return GetToken(IddParser.AUTOCALCULATABLE_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOSIZABLE_STATEMENT() { return GetToken(IddParser.AUTOSIZABLE_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_EXTENSIBLE_STATEMENT() { return GetToken(IddParser.BEGIN_EXTENSIBLE_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_STATEMENT() { return GetToken(IddParser.DEFAULT_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEPRECATED_STATEMENT() { return GetToken(IddParser.DEPRECATED_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL_LIST_STATEMENT() { return GetToken(IddParser.EXTERNAL_LIST_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD_STATEMENT() { return GetToken(IddParser.FIELD_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IP_UNITS_STATEMENT() { return GetToken(IddParser.IP_UNITS_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_STATEMENT() { return GetToken(IddParser.KEY_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Maximum_inclusive_statementContext maximum_inclusive_statement() {
			return GetRuleContext<Maximum_inclusive_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Maximum_exclusive_statementContext maximum_exclusive_statement() {
			return GetRuleContext<Maximum_exclusive_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Minimum_inclusive_statementContext minimum_inclusive_statement() {
			return GetRuleContext<Minimum_inclusive_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Minimum_exclusive_statementContext minimum_exclusive_statement() {
			return GetRuleContext<Minimum_exclusive_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTE_STATEMENT() { return GetToken(IddParser.NOTE_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_LIST_STATEMENT() { return GetToken(IddParser.OBJECT_LIST_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_STATEMENT() { return GetToken(IddParser.REFERENCE_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_CLASS_NAME_STATEMENT() { return GetToken(IddParser.REFERENCE_CLASS_NAME_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED_FIELD_STATEMENT() { return GetToken(IddParser.REQUIRED_FIELD_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAINCASE_STATEMENT() { return GetToken(IddParser.RETAINCASE_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_statementContext type_statement() {
			return GetRuleContext<Type_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNITS_STATEMENT() { return GetToken(IddParser.UNITS_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Units_based_on_field_statementContext units_based_on_field_statement() {
			return GetRuleContext<Units_based_on_field_statementContext>(0);
		}
		public Field_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterField_property(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitField_property(this);
		}
	}

	[RuleVersion(0)]
	public Field_propertyContext field_property() {
		Field_propertyContext _localctx = new Field_propertyContext(Context, State);
		EnterRule(_localctx, 22, RULE_field_property);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				Match(AUTOCALCULATABLE_STATEMENT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				Match(AUTOSIZABLE_STATEMENT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 111;
				Match(BEGIN_EXTENSIBLE_STATEMENT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 112;
				Match(DEFAULT_STATEMENT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 113;
				Match(DEPRECATED_STATEMENT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 114;
				Match(EXTERNAL_LIST_STATEMENT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 115;
				Match(FIELD_STATEMENT);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 116;
				Match(IP_UNITS_STATEMENT);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 117;
				Match(KEY_STATEMENT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 118;
				maximum_inclusive_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 119;
				maximum_exclusive_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 120;
				minimum_inclusive_statement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 121;
				minimum_exclusive_statement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 122;
				Match(NOTE_STATEMENT);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 123;
				Match(OBJECT_LIST_STATEMENT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 124;
				Match(REFERENCE_STATEMENT);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 125;
				Match(REFERENCE_CLASS_NAME_STATEMENT);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 126;
				Match(REQUIRED_FIELD_STATEMENT);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 127;
				Match(RETAINCASE_STATEMENT);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 128;
				type_statement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 129;
				Match(UNITS_STATEMENT);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 130;
				units_based_on_field_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maximum_exclusive_statementContext : ParserRuleContext {
		public IToken maxval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REALNUMBER() { return GetToken(IddParser.REALNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(IddParser.INTEGER, 0); }
		public Maximum_exclusive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maximum_exclusive_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterMaximum_exclusive_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitMaximum_exclusive_statement(this);
		}
	}

	[RuleVersion(0)]
	public Maximum_exclusive_statementContext maximum_exclusive_statement() {
		Maximum_exclusive_statementContext _localctx = new Maximum_exclusive_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_maximum_exclusive_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(T__0);
			State = 134;
			Match(T__1);
			State = 135;
			_localctx.maxval = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==REALNUMBER) ) {
				_localctx.maxval = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maximum_inclusive_statementContext : ParserRuleContext {
		public IToken maxval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REALNUMBER() { return GetToken(IddParser.REALNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(IddParser.INTEGER, 0); }
		public Maximum_inclusive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maximum_inclusive_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterMaximum_inclusive_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitMaximum_inclusive_statement(this);
		}
	}

	[RuleVersion(0)]
	public Maximum_inclusive_statementContext maximum_inclusive_statement() {
		Maximum_inclusive_statementContext _localctx = new Maximum_inclusive_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_maximum_inclusive_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(T__0);
			State = 138;
			_localctx.maxval = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==REALNUMBER) ) {
				_localctx.maxval = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Min_fields_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(IddParser.INTEGER, 0); }
		public Min_fields_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_min_fields_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterMin_fields_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitMin_fields_statement(this);
		}
	}

	[RuleVersion(0)]
	public Min_fields_statementContext min_fields_statement() {
		Min_fields_statementContext _localctx = new Min_fields_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_min_fields_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(T__2);
			State = 141;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Minimum_exclusive_statementContext : ParserRuleContext {
		public IToken minval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REALNUMBER() { return GetToken(IddParser.REALNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(IddParser.INTEGER, 0); }
		public Minimum_exclusive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minimum_exclusive_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterMinimum_exclusive_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitMinimum_exclusive_statement(this);
		}
	}

	[RuleVersion(0)]
	public Minimum_exclusive_statementContext minimum_exclusive_statement() {
		Minimum_exclusive_statementContext _localctx = new Minimum_exclusive_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_minimum_exclusive_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(T__3);
			State = 144;
			Match(T__4);
			State = 145;
			_localctx.minval = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==REALNUMBER) ) {
				_localctx.minval = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Minimum_inclusive_statementContext : ParserRuleContext {
		public IToken minval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REALNUMBER() { return GetToken(IddParser.REALNUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(IddParser.INTEGER, 0); }
		public Minimum_inclusive_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minimum_inclusive_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterMinimum_inclusive_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitMinimum_inclusive_statement(this);
		}
	}

	[RuleVersion(0)]
	public Minimum_inclusive_statementContext minimum_inclusive_statement() {
		Minimum_inclusive_statementContext _localctx = new Minimum_inclusive_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_minimum_inclusive_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(T__3);
			State = 148;
			_localctx.minval = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==REALNUMBER) ) {
				_localctx.minval = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD_TYPE() { return GetToken(IddParser.FIELD_TYPE, 0); }
		public Type_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterType_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitType_statement(this);
		}
	}

	[RuleVersion(0)]
	public Type_statementContext type_statement() {
		Type_statementContext _localctx = new Type_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_type_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(T__5);
			State = 151;
			Match(FIELD_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Units_based_on_field_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHA_OPTION() { return GetToken(IddParser.ALPHA_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_OPTION() { return GetToken(IddParser.NUMERIC_OPTION, 0); }
		public Units_based_on_field_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_units_based_on_field_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.EnterUnits_based_on_field_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIddListener typedListener = listener as IIddListener;
			if (typedListener != null) typedListener.ExitUnits_based_on_field_statement(this);
		}
	}

	[RuleVersion(0)]
	public Units_based_on_field_statementContext units_based_on_field_statement() {
		Units_based_on_field_statementContext _localctx = new Units_based_on_field_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_units_based_on_field_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(T__6);
			State = 154;
			_la = TokenStream.LA(1);
			if ( !(_la==ALPHA_OPTION || _la==NUMERIC_OPTION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,40,157,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,5,0,41,8,0,10,0,12,0,44,
		9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,5,2,54,8,2,10,2,12,2,57,9,2,1,2,1,
		2,1,3,5,3,62,8,3,10,3,12,3,65,9,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,1,6,1,6,1,7,1,7,1,7,5,7,82,8,7,10,7,12,7,85,9,7,1,8,1,8,5,8,89,8,8,
		10,8,12,8,92,9,8,1,9,1,9,5,9,96,8,9,10,9,12,9,99,9,9,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,3,10,108,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		3,11,132,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,
		15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,0,0,19,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,0,2,1,0,34,35,1,0,
		32,33,174,0,42,1,0,0,0,2,47,1,0,0,0,4,50,1,0,0,0,6,63,1,0,0,0,8,68,1,0,
		0,0,10,72,1,0,0,0,12,76,1,0,0,0,14,78,1,0,0,0,16,90,1,0,0,0,18,97,1,0,
		0,0,20,107,1,0,0,0,22,131,1,0,0,0,24,133,1,0,0,0,26,137,1,0,0,0,28,140,
		1,0,0,0,30,143,1,0,0,0,32,147,1,0,0,0,34,150,1,0,0,0,36,153,1,0,0,0,38,
		41,5,37,0,0,39,41,3,14,7,0,40,38,1,0,0,0,40,39,1,0,0,0,41,44,1,0,0,0,42,
		40,1,0,0,0,42,43,1,0,0,0,43,45,1,0,0,0,44,42,1,0,0,0,45,46,5,0,0,1,46,
		1,1,0,0,0,47,48,3,4,2,0,48,49,3,6,3,0,49,3,1,0,0,0,50,51,5,36,0,0,51,55,
		5,38,0,0,52,54,5,37,0,0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,
		1,0,0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,59,3,16,8,0,59,5,1,0,0,0,60,62,
		3,10,5,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,66,
		1,0,0,0,65,63,1,0,0,0,66,67,3,8,4,0,67,7,1,0,0,0,68,69,3,12,6,0,69,70,
		5,39,0,0,70,71,3,18,9,0,71,9,1,0,0,0,72,73,3,12,6,0,73,74,5,38,0,0,74,
		75,3,18,9,0,75,11,1,0,0,0,76,77,7,0,0,0,77,13,1,0,0,0,78,83,5,18,0,0,79,
		82,3,2,1,0,80,82,5,37,0,0,81,79,1,0,0,0,81,80,1,0,0,0,82,85,1,0,0,0,83,
		81,1,0,0,0,83,84,1,0,0,0,84,15,1,0,0,0,85,83,1,0,0,0,86,89,3,20,10,0,87,
		89,5,37,0,0,88,86,1,0,0,0,88,87,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,90,
		91,1,0,0,0,91,17,1,0,0,0,92,90,1,0,0,0,93,96,3,22,11,0,94,96,5,37,0,0,
		95,93,1,0,0,0,95,94,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,
		98,19,1,0,0,0,99,97,1,0,0,0,100,108,5,14,0,0,101,108,5,17,0,0,102,108,
		5,21,0,0,103,108,3,28,14,0,104,108,5,24,0,0,105,108,5,28,0,0,106,108,5,
		30,0,0,107,100,1,0,0,0,107,101,1,0,0,0,107,102,1,0,0,0,107,103,1,0,0,0,
		107,104,1,0,0,0,107,105,1,0,0,0,107,106,1,0,0,0,108,21,1,0,0,0,109,132,
		5,9,0,0,110,132,5,10,0,0,111,132,5,11,0,0,112,132,5,12,0,0,113,132,5,13,
		0,0,114,132,5,15,0,0,115,132,5,16,0,0,116,132,5,19,0,0,117,132,5,20,0,
		0,118,132,3,26,13,0,119,132,3,24,12,0,120,132,3,32,16,0,121,132,3,30,15,
		0,122,132,5,22,0,0,123,132,5,23,0,0,124,132,5,25,0,0,125,132,5,26,0,0,
		126,132,5,27,0,0,127,132,5,29,0,0,128,132,3,34,17,0,129,132,5,31,0,0,130,
		132,3,36,18,0,131,109,1,0,0,0,131,110,1,0,0,0,131,111,1,0,0,0,131,112,
		1,0,0,0,131,113,1,0,0,0,131,114,1,0,0,0,131,115,1,0,0,0,131,116,1,0,0,
		0,131,117,1,0,0,0,131,118,1,0,0,0,131,119,1,0,0,0,131,120,1,0,0,0,131,
		121,1,0,0,0,131,122,1,0,0,0,131,123,1,0,0,0,131,124,1,0,0,0,131,125,1,
		0,0,0,131,126,1,0,0,0,131,127,1,0,0,0,131,128,1,0,0,0,131,129,1,0,0,0,
		131,130,1,0,0,0,132,23,1,0,0,0,133,134,5,1,0,0,134,135,5,2,0,0,135,136,
		7,1,0,0,136,25,1,0,0,0,137,138,5,1,0,0,138,139,7,1,0,0,139,27,1,0,0,0,
		140,141,5,3,0,0,141,142,5,32,0,0,142,29,1,0,0,0,143,144,5,4,0,0,144,145,
		5,5,0,0,145,146,7,1,0,0,146,31,1,0,0,0,147,148,5,4,0,0,148,149,7,1,0,0,
		149,33,1,0,0,0,150,151,5,6,0,0,151,152,5,8,0,0,152,35,1,0,0,0,153,154,
		5,7,0,0,154,155,7,0,0,0,155,37,1,0,0,0,12,40,42,55,63,81,83,88,90,95,97,
		107,131
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
